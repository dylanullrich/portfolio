---
import { Icon } from 'astro-icon/components';

interface Props {
  iconSize?: number;
  textSize?: 'text-sm' | 'text-lg' | 'text-xl';
  showText?: boolean;
  direction?: 'row' | 'col';
}

const { iconSize, textSize, showText, direction } =
  Astro.props as Props;

const links = [
  {
    icon: 'eva:github-outline',
    name: '',
    href: 'https://github.com/dylanullrich',
  },
  {
    icon: 'eva:linkedin-outline',
    name: '',
    href: 'https://www.linkedin.com/in/dsullrich',
  },
  /* {
      icon: 'simple-icons:matrix',
      name: '',
      href: '',
    }, */
  {
    icon: 'eva:email-outline',
    name: 'Contact',
    href: 'mailto:dev@dylan.cat',
  },
];

if (showText === false) {
  for (let i = 0; i < links.length; i++) {
    links[i].name = '';
  }
}
---

<div>
  <ul
    class={direction === 'col'
      ? 'flex flex-col items-start justify-center '
      : 'flex items-center justify-center'}
  >
    {
      links.map((link) => (
        <li class={direction === 'col' ? 'my-0.5 ml-2 py-1' : 'ml-2'}>
          <a
            href={link.href}
            title={link.name || link.href}
            target={link.href.startsWith('h') ? '_blank' : '_self'}
            rel="noopener noreferrer"
            class={
              direction === 'col'
                ? 'hvr-primary flex cursor-pointer flex-row-reverse items-center text-lg font-medium text-gray-400 hover:text-gray-100'
                : 'hvr-primary flex cursor-pointer items-center text-lg font-medium text-gray-400 hover:text-gray-100'
            }
          >
            <p class={textSize ? textSize : 'text-base'}>{link.name}</p>
            {link.icon ? (
              <Icon
                name={link.icon}
                class={link.name && direction === 'col' ? 'ml-2 mr-2' : 'ml-2'}
                size={iconSize ? iconSize : 25}
              />
            ) : (
              ''
            )}
          </a>
        </li>
      ))
    }
  </ul>
</div>
