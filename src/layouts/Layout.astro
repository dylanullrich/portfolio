---
// Import base styles
import '../styles/base.css';
import { Icon } from 'astro-icon/components';
import Connect from '../components/Connect.astro';

export interface Props {
  title: string;
}

const { title } = Astro.props;

let scriptSource: string | null = '/stats/js/script.outbound-links.js';
let apiUrl: string | null = '/stats/api/event';
let domain: string | null = 'dyllanullrich.com';

if (Astro.url.hostname === 'localhost') {
  scriptSource = null;
  apiUrl = null;
  domain = null;
}

const navigation = [
  {
    icon: 'heroicons:folder-open',
    name: 'Projects',
    href: '/projects',
  },
  {
    icon: 'heroicons:chat-bubble-bottom-center-text',
    name: 'Blog',
    href: '/blog',
  },
];
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <script defer src={scriptSource} data-api={apiUrl} data-domain={domain}
    ></script>
  </head>

  <body class="h-full w-full bg-slate-950 px-2">
    <div
      class="mx-auto flex min-h-screen max-w-6xl flex-col border-x border-slate-800 bg-slate-900 px-2"
    >
      <header
        class="mx-auto mt-2 rounded-3xl border border-slate-700 bg-slate-800 py-2"
      >
        <nav class="px-4" aria-label="Top">
          <div class="flex items-center sm:gap-x-16">
            <div class="flex items-center">
              <a href="/" title="Home">
                <img
                  src="/du-logo.png"
                  width="25"
                  alt="Developer Dylan"
                  class="hvr-primary max-w-[25px]"
                />
              </a>
              <ul class="flex">
                {
                  navigation.map((link) => (
                    <li class="ml-0.5 sm:ml-4">
                      <a
                        href={link.href}
                        title={link.name || link.href}
                        target={link.href.startsWith('h') ? '_blank' : '_self'}
                        class="hvr-primary ml-2 flex cursor-pointer items-center font-medium text-gray-400 hover:text-gray-100 md:text-xl"
                      >
                        {link.icon ? (
                          <Icon name={link.icon} class="mr-2" size={18} />
                        ) : (
                          ''
                        )}
                        <p>{link.name}</p>
                      </a>
                    </li>
                  ))
                }
              </ul>
            </div>
            <div class="hidden sm:block">
              <Connect iconSize={20} />
            </div>
            <div class="block pl-5 sm:hidden">
              <button
                open-menu
                class="hvr-primary relative flex items-center shadow-fuchsia-500/70 drop-shadow-custom"
              >
                <Icon
                  name="heroicons:arrow-trending-up-20-solid"
                  class="mr-2 text-teal-500/80"
                  size={25}
                />

                <span
                  class="absolute right-0 top-0 h-2 w-2 animate-pingSlow rounded-full bg-sky-500 opacity-75"
                ></span>
              </button>
            </div>
          </div>
        </nav>
      </header>

      <div side-menu class="hidden">
        <div class="absolute left-6 top-12">
          <Connect
            direction="col"
            iconSize={30}
            textSize="text-xl"
          />
        </div>
        <button close-menu class="hidden">
          <Icon name="heroicons:x-mark-20-solid" class="" size={25} />
        </button>
      </div>
      <script>
        // Find our component DOM on the page.
        const openButton = document.querySelector('[open-menu]');
        const closeButton = document.querySelector('[close-menu]');
        let menu = document.querySelector('[side-menu]');

        let menuIsOpen: boolean;
        // Add event listeners to buttons
        [openButton, closeButton].forEach((button) => {
          button?.addEventListener('click', () => {
            if (menuIsOpen && menu) {
              menuIsOpen = false;
              menu.className = 'hidden';
            } else if (!menuIsOpen && menu && closeButton) {
              menuIsOpen = true;
              menu.className =
                'z-50 absolute right-0 px-4 h-screen bg-slate-950 w-2/3 sm:w-1/2 border-slate-700 border-l border-y sm:hidden';
              closeButton.className =
                'block text-gray-200 absolute right-8 top-8 hover:ring-2 px-3 rounded-lg opacity-90 hover:ring-white';
            }
          });
        });
      </script>
      <main class="mx-auto h-full w-full max-w-4xl flex-1 px-4">
        <slot />
      </main>
      <footer class="mx-auto mt-10 py-5">
        <Connect iconSize={20} showText={false} />
        <p class="pt-6 text-center text-base text-gray-400">
          &copy; 2023 Get Ullrich or Die Trying
        </p>
      </footer>
    </div>
  </body>
</html>
